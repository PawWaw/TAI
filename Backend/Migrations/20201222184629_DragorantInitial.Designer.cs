// <auto-generated />
using System;
using Backend.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Backend.Migrations
{
    [DbContext(typeof(DragorantContext))]
    [Migration("20201222184629_DragorantInitial")]
    partial class DragorantInitial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:Collation", "Polish_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Backend.Model.City", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nchar(100)")
                        .HasColumnName("name")
                        .IsFixedLength(true);

                    b.HasKey("Id");

                    b.ToTable("City");
                });

            modelBuilder.Entity("Backend.Model.Deliverer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nchar(100)")
                        .HasColumnName("address")
                        .IsFixedLength(true);

                    b.Property<long>("CityId")
                        .HasColumnType("bigint")
                        .HasColumnName("cityId");

                    b.Property<double>("DragonCoinBalance")
                        .HasColumnType("float")
                        .HasColumnName("dragonCoinBalance");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .HasColumnName("email")
                        .IsFixedLength(true);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .HasColumnName("firstName")
                        .IsFixedLength(true);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .HasColumnName("lastName")
                        .IsFixedLength(true);

                    b.Property<string>("Password")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("password");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .HasColumnName("username")
                        .IsFixedLength(true);

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Deliverer");
                });

            modelBuilder.Entity("Backend.Model.DelivererRate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("date");

                    b.Property<long>("DelivererId")
                        .HasColumnType("bigint")
                        .HasColumnName("delivererId");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userId");

                    b.Property<double>("Value")
                        .HasColumnType("float")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("DelivererId");

                    b.ToTable("DelivererRate");
                });

            modelBuilder.Entity("Backend.Model.Food", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nchar(100)")
                        .HasColumnName("name")
                        .IsFixedLength(true);

                    b.Property<double>("Price")
                        .HasColumnType("float")
                        .HasColumnName("price");

                    b.HasKey("Id");

                    b.ToTable("Food");
                });

            modelBuilder.Entity("Backend.Model.FoodIngredient", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("FoodId")
                        .HasColumnType("bigint")
                        .HasColumnName("foodId");

                    b.Property<long>("IngredientId")
                        .HasColumnType("bigint")
                        .HasColumnName("ingredientId");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.HasIndex("IngredientId");

                    b.ToTable("FoodIngredient");
                });

            modelBuilder.Entity("Backend.Model.FoodOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("FoodId")
                        .HasColumnType("bigint")
                        .HasColumnName("foodId");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("orderId");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.HasIndex("OrderId");

                    b.ToTable("FoodOrder");
                });

            modelBuilder.Entity("Backend.Model.FoodRate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityColumn();

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("date");

                    b.Property<long>("FoodId")
                        .HasColumnType("bigint")
                        .HasColumnName("foodId");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userId");

                    b.Property<double>("Value")
                        .HasColumnType("float")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.HasIndex("UserId");

                    b.ToTable("FoodRate");
                });

            modelBuilder.Entity("Backend.Model.Ingredient", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .HasColumnName("name")
                        .IsFixedLength(true);

                    b.HasKey("Id");

                    b.ToTable("Ingredient");
                });

            modelBuilder.Entity("Backend.Model.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("DelivererId")
                        .HasColumnType("bigint")
                        .HasColumnName("delivererId");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("endTime");

                    b.Property<long>("OrderStationId")
                        .HasColumnType("bigint")
                        .HasColumnName("orderStationId");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nchar(100)")
                        .HasColumnName("status")
                        .IsFixedLength(true);

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userId");

                    b.HasKey("Id");

                    b.HasIndex("DelivererId");

                    b.HasIndex("OrderStationId");

                    b.HasIndex("UserId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Backend.Model.OrderStation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nchar(100)")
                        .HasColumnName("address")
                        .IsFixedLength(true);

                    b.Property<long>("CityId")
                        .HasColumnType("bigint")
                        .HasColumnName("cityId");

                    b.Property<string>("Password")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("password");

                    b.Property<long>("ResteurantId")
                        .HasColumnType("bigint")
                        .HasColumnName("resteurantId");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .HasColumnName("username")
                        .IsFixedLength(true);

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("ResteurantId");

                    b.ToTable("OrderStation");
                });

            modelBuilder.Entity("Backend.Model.Owner", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nchar(100)")
                        .HasColumnName("address")
                        .IsFixedLength(true);

                    b.Property<long>("CityId")
                        .HasColumnType("bigint")
                        .HasColumnName("cityId");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .HasColumnName("email")
                        .IsFixedLength(true);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .HasColumnName("firstName")
                        .IsFixedLength(true);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .HasColumnName("lastName")
                        .IsFixedLength(true);

                    b.Property<string>("Password")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("password");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .HasColumnName("username")
                        .IsFixedLength(true);

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Owner");
                });

            modelBuilder.Entity("Backend.Model.Restaurant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nchar(100)")
                        .HasColumnName("name")
                        .IsFixedLength(true);

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("ownerId");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Restaurant");
                });

            modelBuilder.Entity("Backend.Model.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nchar(100)")
                        .HasColumnName("address")
                        .IsFixedLength(true);

                    b.Property<long>("CityId")
                        .HasColumnType("bigint")
                        .HasColumnName("cityId");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .HasColumnName("email")
                        .IsFixedLength(true);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .HasColumnName("firstName")
                        .IsFixedLength(true);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .HasColumnName("lastName")
                        .IsFixedLength(true);

                    b.Property<string>("Password")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("password");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .HasColumnName("username")
                        .IsFixedLength(true);

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Backend.Model.Deliverer", b =>
                {
                    b.HasOne("Backend.Model.City", "City")
                        .WithMany("Deliverers")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_Deliverer_City")
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Backend.Model.DelivererRate", b =>
                {
                    b.HasOne("Backend.Model.Deliverer", "Deliverer")
                        .WithMany("DelivererRates")
                        .HasForeignKey("DelivererId")
                        .HasConstraintName("FK_DelivererRate_Deliverer")
                        .IsRequired();

                    b.Navigation("Deliverer");
                });

            modelBuilder.Entity("Backend.Model.FoodIngredient", b =>
                {
                    b.HasOne("Backend.Model.Food", "Food")
                        .WithMany("FoodIngredients")
                        .HasForeignKey("FoodId")
                        .HasConstraintName("FK_FoodIngredient_Food")
                        .IsRequired();

                    b.HasOne("Backend.Model.Ingredient", "Ingredient")
                        .WithMany("FoodIngredients")
                        .HasForeignKey("IngredientId")
                        .HasConstraintName("FK_FoodIngredient_Ingredient")
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("Backend.Model.FoodOrder", b =>
                {
                    b.HasOne("Backend.Model.Food", "Food")
                        .WithMany("FoodOrders")
                        .HasForeignKey("FoodId")
                        .HasConstraintName("FK_FoodOrder_Food")
                        .IsRequired();

                    b.HasOne("Backend.Model.Order", "Order")
                        .WithMany("FoodOrders")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_FoodOrder_Order")
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Backend.Model.FoodRate", b =>
                {
                    b.HasOne("Backend.Model.Food", "Food")
                        .WithMany("FoodRates")
                        .HasForeignKey("FoodId")
                        .HasConstraintName("FK_FoodRate_Food")
                        .IsRequired();

                    b.HasOne("Backend.Model.User", "User")
                        .WithMany("FoodRates")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_FoodRate_User")
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Model.Order", b =>
                {
                    b.HasOne("Backend.Model.Deliverer", "Deliverer")
                        .WithMany("Orders")
                        .HasForeignKey("DelivererId")
                        .HasConstraintName("FK_Order_Deliverer")
                        .IsRequired();

                    b.HasOne("Backend.Model.OrderStation", "OrderStation")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStationId")
                        .HasConstraintName("FK_Order_OrderStation")
                        .IsRequired();

                    b.HasOne("Backend.Model.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Order_User")
                        .IsRequired();

                    b.Navigation("Deliverer");

                    b.Navigation("OrderStation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Model.OrderStation", b =>
                {
                    b.HasOne("Backend.Model.City", "City")
                        .WithMany("OrderStations")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_OrderStation_City")
                        .IsRequired();

                    b.HasOne("Backend.Model.Restaurant", "Resteurant")
                        .WithMany("OrderStations")
                        .HasForeignKey("ResteurantId")
                        .HasConstraintName("FK_OrderStation_Restaurant")
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Resteurant");
                });

            modelBuilder.Entity("Backend.Model.Owner", b =>
                {
                    b.HasOne("Backend.Model.City", "City")
                        .WithMany("Owners")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_Owner_City")
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Backend.Model.Restaurant", b =>
                {
                    b.HasOne("Backend.Model.Owner", "Owner")
                        .WithMany("Restaurants")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("FK_Restaurant_Owner")
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Backend.Model.User", b =>
                {
                    b.HasOne("Backend.Model.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_User_City")
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Backend.Model.City", b =>
                {
                    b.Navigation("Deliverers");

                    b.Navigation("OrderStations");

                    b.Navigation("Owners");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Backend.Model.Deliverer", b =>
                {
                    b.Navigation("DelivererRates");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Backend.Model.Food", b =>
                {
                    b.Navigation("FoodIngredients");

                    b.Navigation("FoodOrders");

                    b.Navigation("FoodRates");
                });

            modelBuilder.Entity("Backend.Model.Ingredient", b =>
                {
                    b.Navigation("FoodIngredients");
                });

            modelBuilder.Entity("Backend.Model.Order", b =>
                {
                    b.Navigation("FoodOrders");
                });

            modelBuilder.Entity("Backend.Model.OrderStation", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Backend.Model.Owner", b =>
                {
                    b.Navigation("Restaurants");
                });

            modelBuilder.Entity("Backend.Model.Restaurant", b =>
                {
                    b.Navigation("OrderStations");
                });

            modelBuilder.Entity("Backend.Model.User", b =>
                {
                    b.Navigation("FoodRates");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
